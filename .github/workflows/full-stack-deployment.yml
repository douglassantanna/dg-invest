name: Full Stack Deployment Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        type: environment
        required: true

jobs:
  build_backend:
    name: Build Backend
    runs-on: ubuntu-latest
    env:
      AZURE_WEBAPP_PACKAGE_PATH: "api/api/api.csproj"
      SOLUTION: "api/dg-invest.api.sln"

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.x"

      - name: Build with dotnet
        run: dotnet build ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} --configuration Release

      - name: dotnet publish
        run: dotnet publish ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} -c Release -o ${{ env.DOTNET_ROOT }}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ env.DOTNET_ROOT }}/myapp

  deploy_backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    needs: build_backend
    environment:
      name: ${{ github.event.inputs.environment }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ vars.AZURE_WEBAPP_NAME }}
          slot-name: 'production'
          package: .
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}

  build_and_deploy_frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy_backend
    environment: staging  # Default to staging
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false
          
      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.14.0"

      # Downcase Environment
      - name: Downcase Environment
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }} " | tr '[:upper:]' '[:lower:]' >> ${GITHUB_ENV}

      # Install dependencies
      - name: Install dependencies
        working-directory: ./web-app
        run: npm install

      # Build the Angular app
      - name: Build Angular app
        working-directory: ./web-app
        run: |
          npm run build --if-present -- --configuration=${{ env.ENVIRONMENT }}

      # Upload Build Artifacts
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-app
          path: ./web-app  # Adjust according to your build output

  deploy_staging:
    runs-on: ubuntu-latest
    needs: build_and_deploy_frontend
    environment:
      name: staging  # Define the staging environment
    steps:
      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-app

      - name: Deploy to Azure Static Web App (Staging)
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GENTLE_SEA_021FA1C03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./web-app"  # Adjust according to your build output
          api_location: ""                          # Specify if you have an API
          output_location: "dist/web-app"          # Adjust according to your build output

  deploy_production:
    runs-on: ubuntu-latest
    needs: deploy_staging
    environment: production  # Define the production environment
    steps:
      - name: Wait for Approval
        run: echo "Approval needed before deploying to production"
        id: approval
        if: ${{ github.event.inputs.approve == 'yes' }}  # Condition for approval

      - name: Deploy to Azure Static Web App (Production)
        if: steps.approval.outputs.approval == 'yes'
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_GENTLE_SEA_021FA1C03 }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./web-app"  # Adjust according to your build output
          api_location: ""                          # Specify if you have an API
          output_location: "dist/web-app"          # Adjust according to your build output
